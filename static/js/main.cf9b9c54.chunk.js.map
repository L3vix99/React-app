{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","handleCheckbox","e","_this","setState","target","handleText","value","handleDate","handleClick","_this$state","length","props","add","alert","this","react_default","a","createElement","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","change","margin","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","b","toLowerCase","activeTasks","map","components_Task","key","doneTasks","Fragment","fontSize","App","counter","deleteTask","Object","toConsumableArray","changeTaskStatus","console","log","Array","from","forEach","getTime","addTask","prevState","concat","src_components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf9b9c54.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./AddTask.css\";\r\n\r\n\r\n\r\nclass AddTask extends Component {\r\n\r\n   minDate = new Date().toISOString().slice(0,10);\r\n\r\n       state = {\r\n        text: \"\",\r\n        checked: false,\r\n        date: new Date().toISOString().slice(0,10),\r\n\r\n      } \r\n\r\n      handleCheckbox = (e) => {\r\n          this.setState ({\r\n            checked: e.target.checked\r\n          })\r\n      }\r\n\r\n      handleText = (e) => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n      }\r\n\r\n      handleDate = (e) => {\r\n          this.setState({\r\n              date: e.target.value\r\n          })\r\n      }\r\n\r\n      handleClick = () => {\r\n        \r\n      const { text, checked, date } = this.state;\r\n      if(text.length>2) {\r\n       const add =  this.props.add(text, date, checked);\r\n       if(add) {\r\n         this.setState({\r\n           text: \" \",\r\n           checked: false,\r\n           date: this.minDate,\r\n         })\r\n       }} else {\r\n         alert(\"Za krótka nazwa\");\r\n       }\r\n\r\n      }\r\n    render() { \r\n      \r\n        let maxDate = this.minDate.slice(0,4)* 1 + 1;\r\n       \r\n        maxDate = maxDate + \" -12-31\" ;\r\n\r\n        return (\r\n       <div className=\"form\">\r\n         <input type=\"text\" placeholder=\"dodaj zadanie\" \r\n         value = {this.state.text}  onChange = {this.handleText}/>\r\n\r\n         <input type=\"checkbox\" checked= {this.state.checked} \r\n         id=\"importand\" onChange={this.handleCheckbox} />\r\n\r\n\r\n         <label htmlFor=\"importand\">Priorytet</label><br /><br />\r\n\r\n         <label htmlFor = \"date\" > Do kiedy zrobić</label>\r\n\r\n         <input type=\"date\" value={this.state.date} min = {this.minDate} \r\n         max = \"2022-12-31\" onChange={this.handleDate}/>\r\n\r\n         <br />\r\n        <button onClick={this.handleClick}>Dodaj</button>\r\n       </div>\r\n        \r\n       \r\n    )}\r\n}\r\n \r\nexport default AddTask;","import React from 'react';\r\nimport TaskList from './TaskList';\r\n\r\nconst Task = (props) => {\r\n\r\n    const style = {\r\n        color: \"red\",\r\n    }\r\n    \r\n    const {text, date, id, active, important, finishDate} = props.task;\r\n\r\n    if(active) {\r\n    return (  \r\n     <div>\r\n         <p>\r\n         <strong style = {important ? style : null}>{text}</strong> - do:  <span>{date}  </span>\r\n        \r\n         <button onClick={() => props.change(id)}>Zostało Zrobione</button>\r\n        <button style={{margin: 10}} onClick={()=> props.delete(id)}>X</button>\r\n         </p>\r\n\r\n         \r\n     </div>\r\n);\r\n} else {\r\n\r\n    const finish = new Date(finishDate).toLocaleString();\r\n    return (\r\n        <p>\r\n        <strong>{text}</strong><em>(zrobić do {date} )\r\n        </em><br />\r\n        - potwierdzenie wykonania:  <span>{finish}</span>\r\n       \r\n        \r\n        <button style={{margin: 10}} onClick={()=> props.delete(id)}>X</button>\r\n        </p>\r\n    \r\n    )\r\n}\r\n} \r\n\r\n \r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\n\r\nconst TaskList = (props) => {\r\n\r\n    const active = props.tasks.filter(task => task.active);\r\n    const done =   props.tasks.filter(task => !task.active);\r\n    // 1 sposob sort\r\n   // done.sort((a,b) => b.finishDate - a.finishDate)\r\n\r\n   // 2 sposob sort (done)\r\n    if (done.length >= 2){\r\n   done.sort((a, b) => {\r\n      if (a.finishDate < b.finishDate) {\r\n        return 1\r\n      }\r\n\r\n      if (a.finishDate > b.finishDate) {\r\n        return -1\r\n      } \r\n      else {\r\n        return 0\r\n      }\r\n   })}\r\n   // active sort \r\n   if(active.length >= 2) {\r\n\r\n     active.sort((a, b) => {\r\n\r\n      a = a.text.toLowerCase();\r\n      b = b.text.toLowerCase();\r\n\r\n       if(a < b) return -1;\r\n        \r\n         if(a > b) return 1;\r\n\r\n        return 0;\r\n          \r\n       })\r\n      }\r\n   \r\n    //console.log(active, done);\r\n\r\n    const activeTasks = active.map(task => <Task \r\n    key={task.id} task={task} delete={props.delete} change= {props.change} />);\r\n\r\n    const doneTasks = done.map(task => <Task \r\n    key={task.id} task={task} delete={props.delete} change= {props.change} />); \r\n    return (  \r\n        <>\r\n        <div className='active'>\r\n           <h1> Zadania do zrobienia </h1>\r\n          {activeTasks.length > 0 ? activeTasks :\r\n           <p>brak zadań, ale jesteś dobry ziom!</p>}\r\n         \r\n        </div>\r\n\r\n        <hr />\r\n\r\n        <div className='done'>\r\n          <h3>Zadania zrobione <em>({done.length})</em></h3>\r\n          {done.length > 4 && <span style = {{fontSize: \"10px\", color: \"red\"}}>Wyświetlone są jedynie \r\n         4 ostatnie zadania </span>}\r\n          {doneTasks.slice(0, 4)}\r\n         \r\n        </div>\r\n        </>\r\n    );\r\n}\r\n \r\nexport default TaskList;\r\n","import React, { Component } from 'react';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList';\n\n\nimport './App.css';\n\nclass App extends Component {\n  counter = 6;\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: \"Zagrać wreszcie w Wiedzmina 3\",\n        date: \"2022-02-15\",\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {id: 1 , text: \"Zrobić zakupy \", date: \"2022-11-12\",important: false, active:true, finishDate:null},\n      {id: 2 , text: \"nauka js i reacta \", date: \"2022-10-19\",important: false, active:true, finishDate:null},\n      {id: 3 , text: \"Wyjść z psem na spacer \", date: \"2022-09-18\",important: false, active:true, finishDate:null},\n      {id: 4 , text: \"Projekt na studia \", date: \"2022-12-02\",important: false, active:true, finishDate:null},\n      {id: 5 , text: \"Nauka programowania (Ogólna) \", date: \"2022-07-02\",important: false, active:true, finishDate:null},\n    ]\n  }\n\n  deleteTask = (id) => {\n\n// PIERWSZA METODA USUWANIA \n\n // console.log(\"delate elementu id\" + id);\n//const tasks = [...this.state.tasks];\n // console.log(tasks);\n // const index = tasks.findIndex(task => task.id === id);\n // tasks.splice(index, 1);\n // console.log(tasks); \n\n\n //DRUGA METODA USUWANIA \n\n let tasks = [...this.state.tasks];\n //console.log(tasks);\n tasks = tasks.filter(task => task.id !== id);\n //console.log(tasks);\n  this.setState({\n  tasks: tasks\n   })\n  }\n\n\n\n  changeTaskStatus = (id) => {\n    console.log(\"change w stanie elementu o id\" + id);\n    const tasks = Array.from(this.state.tasks);\n    tasks.forEach(task=> {\n      if(task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime()\n      }\n    })\n\n    this.setState({\n      tasks: tasks\n    })\n\n  }\n\n  addTask = (text, date, important) => {\n    //console.log(\"dodajemy obiekt\");\n    const task = { \n      id: this.counter,\n      text: text, //tekst z inputa \n      date: date, //tekst z inputa\n      important: important, //wartość z inputa \n      active: true,\n      finishDate: null,\n    }\n\n    this.counter++;\n    console.log(task, this.counter);\n\n\n    this.setState(prevState => ({ \n      tasks: [...prevState.tasks, task]\n\n    }))\n    return true\n  }\n\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <h1>TODO APP</h1>\n        <AddTask  add={this.addTask}/>\n        <TaskList tasks={this.state.tasks}\n         delete={this.deleteTask} change={this.changeTaskStatus}/>\n     \n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}